specialTimedAssertionConfiguration {
  akka.test.single-expect-default = 0.3s
}

interceptingLogMessages {
  akka {
    loggers = ["akka.testkit.TestEventListener"]
  }
}

routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }

      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
      }
    }
  }
}


my-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 1
  }
  throughput = 30
}

dispatchersDemo {
  akka.actor.deployment {
    /dispatcher2 {
      dispatcher = my-dispatcher
    }
  }
}


mailboxDemo {
  support-ticket-pr {
    mailbox-type = "AkkaEssentials.Part6Infrastructure.Mailboxes$SupportTicket"
  }

  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }

  akka.actor.deployment {
    /altControlAwareActor {
      mailbox = control-mailbox
    }
  }
}

dedicated {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 5
  }
}

akka {
  loglevel = "DEBUG"
  actor.provider = cluster
}

akka {
  persistence {
    journal.plugin = "akka.persistence.journal.leveldb"
    journal.leveldb.dir = "target/akkaPersistence/journal"
    snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    snapshot-store.local.dir = "target/akkaPersistence/snapshots"
  }

  actor {
    allow-java-serialization = on
    warn-about-java-serializer-usage = off
  }
}
